//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LCM.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class VPLComplianceEntities : DbContext
    {
        public VPLComplianceEntities()
            : base("name=VPLComplianceEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<alert_detail> alert_detail { get; set; }
        public virtual DbSet<DD_Freq> DD_Freq { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<MM_Freq> MM_Freq { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<VPL_Compliance_AlertTo> VPL_Compliance_AlertTo { get; set; }
        public virtual DbSet<VPL_Compliance_Frequency> VPL_Compliance_Frequency { get; set; }
        public virtual DbSet<VPL_Compliance_Frequency_Details> VPL_Compliance_Frequency_Details { get; set; }
        public virtual DbSet<VPL_Compliance_InfoRequired> VPL_Compliance_InfoRequired { get; set; }
        public virtual DbSet<VPL_Compliance_Master> VPL_Compliance_Master { get; set; }
        public virtual DbSet<VPL_Compliance_Responsibility> VPL_Compliance_Responsibility { get; set; }
        public virtual DbSet<VPL_Compliance_Scheduling> VPL_Compliance_Scheduling { get; set; }
        public virtual DbSet<VPL_Compliance_Status> VPL_Compliance_Status { get; set; }
        public virtual DbSet<VPL_HR_MenuMaster> VPL_HR_MenuMaster { get; set; }
        public virtual DbSet<VPL_HR_RoleDetail> VPL_HR_RoleDetail { get; set; }
        public virtual DbSet<VPL_HR_RoleMaster> VPL_HR_RoleMaster { get; set; }
        public virtual DbSet<VPL_HR_UserDetails> VPL_HR_UserDetails { get; set; }
        public virtual DbSet<VPL_HR_Users> VPL_HR_Users { get; set; }
        public virtual DbSet<VPL_User_App_Auth> VPL_User_App_Auth { get; set; }
        public virtual DbSet<tmpVPL_Compliance_Master> tmpVPL_Compliance_Master { get; set; }
        public virtual DbSet<VPL_HR_SubMenuPages> VPL_HR_SubMenuPages { get; set; }
        public virtual DbSet<C_Compliance_Scheduling_detail> C_Compliance_Scheduling_detail { get; set; }
        public virtual DbSet<Com_Company_Master> Com_Company_Master { get; set; }
        public virtual DbSet<Com_Dept_Master> Com_Dept_Master { get; set; }
        public virtual DbSet<Com_Emp_Legal_Sec> Com_Emp_Legal_Sec { get; set; }
        public virtual DbSet<Com_Unit_Master> Com_Unit_Master { get; set; }
        public virtual DbSet<Compliance_Scheduling_detail> Compliance_Scheduling_detail { get; set; }
        public virtual DbSet<StaffDetail> StaffDetails { get; set; }
        public virtual DbSet<VPL_Compliance_AlertTo_Detail> VPL_Compliance_AlertTo_Detail { get; set; }
        public virtual DbSet<VPL_Compliance_InfoRequired_Detail> VPL_Compliance_InfoRequired_Detail { get; set; }
        public virtual DbSet<VPL_Compliance_Master_Detail> VPL_Compliance_Master_Detail { get; set; }
        public virtual DbSet<VPL_Compliance_Schedule_Report> VPL_Compliance_Schedule_Report { get; set; }
        public virtual DbSet<VPL_Compliance_Schedule_Status> VPL_Compliance_Schedule_Status { get; set; }
        public virtual DbSet<VPL_Compliance_Schedule_Status_ALL> VPL_Compliance_Schedule_Status_ALL { get; set; }
        public virtual DbSet<VPLCompliance_dashboard> VPLCompliance_dashboard { get; set; }
        public virtual DbSet<VPLCompliance_dashboard_Details> VPLCompliance_dashboard_Details { get; set; }
    
        public virtual ObjectResult<CCr_Role_menuExclude_Result> CCr_Role_menuExclude(Nullable<int> roleid)
        {
            var roleidParameter = roleid.HasValue ?
                new ObjectParameter("Roleid", roleid) :
                new ObjectParameter("Roleid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CCr_Role_menuExclude_Result>("CCr_Role_menuExclude", roleidParameter);
        }
    
        public virtual ObjectResult<CCR_UserRoleExclude_Result> CCR_UserRoleExclude(Nullable<int> userid)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("Userid", userid) :
                new ObjectParameter("Userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CCR_UserRoleExclude_Result>("CCR_UserRoleExclude", useridParameter);
        }
    
        public virtual ObjectResult<Get_UserComm_ByRole_Result> Get_UserComm_ByRole(Nullable<int> roleId, Nullable<int> commID)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var commIDParameter = commID.HasValue ?
                new ObjectParameter("CommID", commID) :
                new ObjectParameter("CommID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_UserComm_ByRole_Result>("Get_UserComm_ByRole", roleIdParameter, commIDParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<VPL_Compliance_Detail_Result> VPL_Compliance_Detail(Nullable<decimal> cID)
        {
            var cIDParameter = cID.HasValue ?
                new ObjectParameter("CID", cID) :
                new ObjectParameter("CID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VPL_Compliance_Detail_Result>("VPL_Compliance_Detail", cIDParameter);
        }
    
        public virtual int VPL_Compliance_Scheduling_Generate()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VPL_Compliance_Scheduling_Generate");
        }
    
        public virtual ObjectResult<VPL_HR_DisplayMenu_Result> VPL_HR_DisplayMenu(Nullable<decimal> menuID)
        {
            var menuIDParameter = menuID.HasValue ?
                new ObjectParameter("MenuID", menuID) :
                new ObjectParameter("MenuID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VPL_HR_DisplayMenu_Result>("VPL_HR_DisplayMenu", menuIDParameter);
        }
    
        public virtual ObjectResult<VPL_HR_DisplayParentMenu_Result> VPL_HR_DisplayParentMenu(Nullable<decimal> menuID)
        {
            var menuIDParameter = menuID.HasValue ?
                new ObjectParameter("MenuID", menuID) :
                new ObjectParameter("MenuID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VPL_HR_DisplayParentMenu_Result>("VPL_HR_DisplayParentMenu", menuIDParameter);
        }
    
        public virtual int VPL_HR_FillMenu(Nullable<decimal> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VPL_HR_FillMenu", userIDParameter);
        }
    
        public virtual int VPL_HR_FillMenu1(Nullable<decimal> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VPL_HR_FillMenu1", userIDParameter);
        }
    
        public virtual int VPL_HR_FillMenu1_Temp(Nullable<decimal> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VPL_HR_FillMenu1_Temp", userIDParameter);
        }
    
        public virtual int VPL_HR_FillMenu2(Nullable<decimal> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VPL_HR_FillMenu2", userIDParameter);
        }
    
        public virtual int VPL_HR_MenuMaster_AssignedList(Nullable<decimal> roleID)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VPL_HR_MenuMaster_AssignedList", roleIDParameter);
        }
    
        public virtual int VPL_HR_MenuMaster_delete(Nullable<decimal> menuID, string crBy, string crIP)
        {
            var menuIDParameter = menuID.HasValue ?
                new ObjectParameter("MenuID", menuID) :
                new ObjectParameter("MenuID", typeof(decimal));
    
            var crByParameter = crBy != null ?
                new ObjectParameter("CrBy", crBy) :
                new ObjectParameter("CrBy", typeof(string));
    
            var crIPParameter = crIP != null ?
                new ObjectParameter("CrIP", crIP) :
                new ObjectParameter("CrIP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VPL_HR_MenuMaster_delete", menuIDParameter, crByParameter, crIPParameter);
        }
    
        public virtual int VPL_HR_MenuMaster_Insert(Nullable<decimal> parentID, string menuDesc, string status, string pageIndex, string selectable, string crBy, string crIP)
        {
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(decimal));
    
            var menuDescParameter = menuDesc != null ?
                new ObjectParameter("MenuDesc", menuDesc) :
                new ObjectParameter("MenuDesc", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var pageIndexParameter = pageIndex != null ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(string));
    
            var selectableParameter = selectable != null ?
                new ObjectParameter("Selectable", selectable) :
                new ObjectParameter("Selectable", typeof(string));
    
            var crByParameter = crBy != null ?
                new ObjectParameter("CrBy", crBy) :
                new ObjectParameter("CrBy", typeof(string));
    
            var crIPParameter = crIP != null ?
                new ObjectParameter("CrIP", crIP) :
                new ObjectParameter("CrIP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VPL_HR_MenuMaster_Insert", parentIDParameter, menuDescParameter, statusParameter, pageIndexParameter, selectableParameter, crByParameter, crIPParameter);
        }
    
        public virtual ObjectResult<VPL_HR_MenuMaster_PendingList_Result> VPL_HR_MenuMaster_PendingList(Nullable<decimal> roleID)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VPL_HR_MenuMaster_PendingList_Result>("VPL_HR_MenuMaster_PendingList", roleIDParameter);
        }
    
        public virtual int VPL_HR_MenuMaster_Update(Nullable<decimal> menuID, Nullable<decimal> parentID, string menuDesc, string status, string pageIndex, string selectable, string crBy, string crIP)
        {
            var menuIDParameter = menuID.HasValue ?
                new ObjectParameter("MenuID", menuID) :
                new ObjectParameter("MenuID", typeof(decimal));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(decimal));
    
            var menuDescParameter = menuDesc != null ?
                new ObjectParameter("MenuDesc", menuDesc) :
                new ObjectParameter("MenuDesc", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var pageIndexParameter = pageIndex != null ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(string));
    
            var selectableParameter = selectable != null ?
                new ObjectParameter("Selectable", selectable) :
                new ObjectParameter("Selectable", typeof(string));
    
            var crByParameter = crBy != null ?
                new ObjectParameter("CrBy", crBy) :
                new ObjectParameter("CrBy", typeof(string));
    
            var crIPParameter = crIP != null ?
                new ObjectParameter("CrIP", crIP) :
                new ObjectParameter("CrIP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VPL_HR_MenuMaster_Update", menuIDParameter, parentIDParameter, menuDescParameter, statusParameter, pageIndexParameter, selectableParameter, crByParameter, crIPParameter);
        }
    
        public virtual ObjectResult<VPL_HR_ParentMenu_Result> VPL_HR_ParentMenu()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VPL_HR_ParentMenu_Result>("VPL_HR_ParentMenu");
        }
    
        public virtual int VPL_HR_ParentMenuMaster_Insert(string menuDesc, string status, string selectable, string crBy, string crIP)
        {
            var menuDescParameter = menuDesc != null ?
                new ObjectParameter("MenuDesc", menuDesc) :
                new ObjectParameter("MenuDesc", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var selectableParameter = selectable != null ?
                new ObjectParameter("Selectable", selectable) :
                new ObjectParameter("Selectable", typeof(string));
    
            var crByParameter = crBy != null ?
                new ObjectParameter("CrBy", crBy) :
                new ObjectParameter("CrBy", typeof(string));
    
            var crIPParameter = crIP != null ?
                new ObjectParameter("CrIP", crIP) :
                new ObjectParameter("CrIP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VPL_HR_ParentMenuMaster_Insert", menuDescParameter, statusParameter, selectableParameter, crByParameter, crIPParameter);
        }
    
        public virtual int VPL_HR_ParentMenuMaster_Update(Nullable<decimal> menuID, string menuDesc, string status, string selectable, string crBy, string crIP)
        {
            var menuIDParameter = menuID.HasValue ?
                new ObjectParameter("MenuID", menuID) :
                new ObjectParameter("MenuID", typeof(decimal));
    
            var menuDescParameter = menuDesc != null ?
                new ObjectParameter("MenuDesc", menuDesc) :
                new ObjectParameter("MenuDesc", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var selectableParameter = selectable != null ?
                new ObjectParameter("Selectable", selectable) :
                new ObjectParameter("Selectable", typeof(string));
    
            var crByParameter = crBy != null ?
                new ObjectParameter("CrBy", crBy) :
                new ObjectParameter("CrBy", typeof(string));
    
            var crIPParameter = crIP != null ?
                new ObjectParameter("CrIP", crIP) :
                new ObjectParameter("CrIP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VPL_HR_ParentMenuMaster_Update", menuIDParameter, menuDescParameter, statusParameter, selectableParameter, crByParameter, crIPParameter);
        }
    
        public virtual int VPL_HR_RoleDetail_Delete(Nullable<decimal> transID, string crby)
        {
            var transIDParameter = transID.HasValue ?
                new ObjectParameter("TransID", transID) :
                new ObjectParameter("TransID", typeof(decimal));
    
            var crbyParameter = crby != null ?
                new ObjectParameter("Crby", crby) :
                new ObjectParameter("Crby", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VPL_HR_RoleDetail_Delete", transIDParameter, crbyParameter);
        }
    
        public virtual int VPL_HR_RoleDetail_Insert(Nullable<decimal> roleID, Nullable<decimal> menuID, string active, string crby)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(decimal));
    
            var menuIDParameter = menuID.HasValue ?
                new ObjectParameter("MenuID", menuID) :
                new ObjectParameter("MenuID", typeof(decimal));
    
            var activeParameter = active != null ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(string));
    
            var crbyParameter = crby != null ?
                new ObjectParameter("Crby", crby) :
                new ObjectParameter("Crby", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VPL_HR_RoleDetail_Insert", roleIDParameter, menuIDParameter, activeParameter, crbyParameter);
        }
    
        public virtual int VPL_HR_RoleMaster_AssignApp(string userID)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VPL_HR_RoleMaster_AssignApp", userIDParameter);
        }
    
        public virtual ObjectResult<VPL_HR_RoleMaster_AssignRoles_Result> VPL_HR_RoleMaster_AssignRoles(string userID)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VPL_HR_RoleMaster_AssignRoles_Result>("VPL_HR_RoleMaster_AssignRoles", userIDParameter);
        }
    
        public virtual int VPL_HR_RoleMaster_Delete(Nullable<decimal> roleID, string crBy)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(decimal));
    
            var crByParameter = crBy != null ?
                new ObjectParameter("CrBy", crBy) :
                new ObjectParameter("CrBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VPL_HR_RoleMaster_Delete", roleIDParameter, crByParameter);
        }
    
        public virtual ObjectResult<VPL_HR_RoleMaster_DisplayList_Result> VPL_HR_RoleMaster_DisplayList(string searchName, Nullable<decimal> roleID)
        {
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VPL_HR_RoleMaster_DisplayList_Result>("VPL_HR_RoleMaster_DisplayList", searchNameParameter, roleIDParameter);
        }
    
        public virtual int VPL_HR_RoleMaster_Insert(string roleDesc, string active, string crBy)
        {
            var roleDescParameter = roleDesc != null ?
                new ObjectParameter("RoleDesc", roleDesc) :
                new ObjectParameter("RoleDesc", typeof(string));
    
            var activeParameter = active != null ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(string));
    
            var crByParameter = crBy != null ?
                new ObjectParameter("CrBy", crBy) :
                new ObjectParameter("CrBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VPL_HR_RoleMaster_Insert", roleDescParameter, activeParameter, crByParameter);
        }
    
        public virtual int VPL_HR_RoleMaster_PendingApp(string userID)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VPL_HR_RoleMaster_PendingApp", userIDParameter);
        }
    
        public virtual ObjectResult<VPL_HR_RoleMaster_PendingRole_Result> VPL_HR_RoleMaster_PendingRole(string userID)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VPL_HR_RoleMaster_PendingRole_Result>("VPL_HR_RoleMaster_PendingRole", userIDParameter);
        }
    
        public virtual int VPL_HR_RoleMaster_Update(Nullable<decimal> roleID, string roleDesc, string active, string crBy)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(decimal));
    
            var roleDescParameter = roleDesc != null ?
                new ObjectParameter("RoleDesc", roleDesc) :
                new ObjectParameter("RoleDesc", typeof(string));
    
            var activeParameter = active != null ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(string));
    
            var crByParameter = crBy != null ?
                new ObjectParameter("CrBy", crBy) :
                new ObjectParameter("CrBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VPL_HR_RoleMaster_Update", roleIDParameter, roleDescParameter, activeParameter, crByParameter);
        }
    
        public virtual int VPL_HR_User_Delete(Nullable<decimal> transID, string crBy)
        {
            var transIDParameter = transID.HasValue ?
                new ObjectParameter("TransID", transID) :
                new ObjectParameter("TransID", typeof(decimal));
    
            var crByParameter = crBy != null ?
                new ObjectParameter("CrBy", crBy) :
                new ObjectParameter("CrBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VPL_HR_User_Delete", transIDParameter, crByParameter);
        }
    
        public virtual int VPL_HR_UserApp_Delete(Nullable<decimal> transID, string crBy)
        {
            var transIDParameter = transID.HasValue ?
                new ObjectParameter("TransID", transID) :
                new ObjectParameter("TransID", typeof(decimal));
    
            var crByParameter = crBy != null ?
                new ObjectParameter("CrBy", crBy) :
                new ObjectParameter("CrBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VPL_HR_UserApp_Delete", transIDParameter, crByParameter);
        }
    
        public virtual int VPL_HR_UserAppAuth_Insert(string userID, Nullable<decimal> roleID, string crBy)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(decimal));
    
            var crByParameter = crBy != null ?
                new ObjectParameter("CrBy", crBy) :
                new ObjectParameter("CrBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VPL_HR_UserAppAuth_Insert", userIDParameter, roleIDParameter, crByParameter);
        }
    
        public virtual int VPL_HR_UserDetails_Delete(Nullable<decimal> transID, string crBy)
        {
            var transIDParameter = transID.HasValue ?
                new ObjectParameter("TransID", transID) :
                new ObjectParameter("TransID", typeof(decimal));
    
            var crByParameter = crBy != null ?
                new ObjectParameter("CrBy", crBy) :
                new ObjectParameter("CrBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VPL_HR_UserDetails_Delete", transIDParameter, crByParameter);
        }
    
        public virtual int VPL_HR_UserDetails_Insert(string userID, Nullable<decimal> roleID, string crBy)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(decimal));
    
            var crByParameter = crBy != null ?
                new ObjectParameter("CrBy", crBy) :
                new ObjectParameter("CrBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VPL_HR_UserDetails_Insert", userIDParameter, roleIDParameter, crByParameter);
        }
    
        public virtual ObjectResult<VPL_HR_Users_displayList_Result> VPL_HR_Users_displayList(string searchName, Nullable<decimal> transID)
        {
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var transIDParameter = transID.HasValue ?
                new ObjectParameter("TransID", transID) :
                new ObjectParameter("TransID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VPL_HR_Users_displayList_Result>("VPL_HR_Users_displayList", searchNameParameter, transIDParameter);
        }
    
        public virtual int VPL_HR_Users_displayList_new(string searchName, Nullable<decimal> transID)
        {
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var transIDParameter = transID.HasValue ?
                new ObjectParameter("TransID", transID) :
                new ObjectParameter("TransID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VPL_HR_Users_displayList_new", searchNameParameter, transIDParameter);
        }
    
        public virtual int VPL_HR_Users_INsert(string userID, string userName, string userPswd, string userEmailID, string userMobile, Nullable<System.DateTime> dOB, string userImage, string crby)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var userPswdParameter = userPswd != null ?
                new ObjectParameter("UserPswd", userPswd) :
                new ObjectParameter("UserPswd", typeof(string));
    
            var userEmailIDParameter = userEmailID != null ?
                new ObjectParameter("UserEmailID", userEmailID) :
                new ObjectParameter("UserEmailID", typeof(string));
    
            var userMobileParameter = userMobile != null ?
                new ObjectParameter("UserMobile", userMobile) :
                new ObjectParameter("UserMobile", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var userImageParameter = userImage != null ?
                new ObjectParameter("UserImage", userImage) :
                new ObjectParameter("UserImage", typeof(string));
    
            var crbyParameter = crby != null ?
                new ObjectParameter("Crby", crby) :
                new ObjectParameter("Crby", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VPL_HR_Users_INsert", userIDParameter, userNameParameter, userPswdParameter, userEmailIDParameter, userMobileParameter, dOBParameter, userImageParameter, crbyParameter);
        }
    
        public virtual int VPL_HR_Users_Update(Nullable<decimal> transID, string userID, string userName, string userEMailID, string userMobile, Nullable<System.DateTime> dOb, string userImage, string active, string crby)
        {
            var transIDParameter = transID.HasValue ?
                new ObjectParameter("TransID", transID) :
                new ObjectParameter("TransID", typeof(decimal));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var userEMailIDParameter = userEMailID != null ?
                new ObjectParameter("UserEMailID", userEMailID) :
                new ObjectParameter("UserEMailID", typeof(string));
    
            var userMobileParameter = userMobile != null ?
                new ObjectParameter("UserMobile", userMobile) :
                new ObjectParameter("UserMobile", typeof(string));
    
            var dObParameter = dOb.HasValue ?
                new ObjectParameter("DOb", dOb) :
                new ObjectParameter("DOb", typeof(System.DateTime));
    
            var userImageParameter = userImage != null ?
                new ObjectParameter("UserImage", userImage) :
                new ObjectParameter("UserImage", typeof(string));
    
            var activeParameter = active != null ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(string));
    
            var crbyParameter = crby != null ?
                new ObjectParameter("Crby", crby) :
                new ObjectParameter("Crby", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VPL_HR_Users_Update", transIDParameter, userIDParameter, userNameParameter, userEMailIDParameter, userMobileParameter, dObParameter, userImageParameter, activeParameter, crbyParameter);
        }
    
        public virtual int VPL_PM_ParentMenu()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VPL_PM_ParentMenu");
        }
    
        public virtual ObjectResult<VPL_PM_Users_displayList_Result> VPL_PM_Users_displayList(string searchName, Nullable<decimal> transID)
        {
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var transIDParameter = transID.HasValue ?
                new ObjectParameter("TransID", transID) :
                new ObjectParameter("TransID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VPL_PM_Users_displayList_Result>("VPL_PM_Users_displayList", searchNameParameter, transIDParameter);
        }
    
        public virtual int VPL_PM_Users_INsert(string userID, string userName, string userPswd, string userEmailID, string userMobile, Nullable<System.DateTime> dOB, string userImage, string crby)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var userPswdParameter = userPswd != null ?
                new ObjectParameter("UserPswd", userPswd) :
                new ObjectParameter("UserPswd", typeof(string));
    
            var userEmailIDParameter = userEmailID != null ?
                new ObjectParameter("UserEmailID", userEmailID) :
                new ObjectParameter("UserEmailID", typeof(string));
    
            var userMobileParameter = userMobile != null ?
                new ObjectParameter("UserMobile", userMobile) :
                new ObjectParameter("UserMobile", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var userImageParameter = userImage != null ?
                new ObjectParameter("UserImage", userImage) :
                new ObjectParameter("UserImage", typeof(string));
    
            var crbyParameter = crby != null ?
                new ObjectParameter("Crby", crby) :
                new ObjectParameter("Crby", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VPL_PM_Users_INsert", userIDParameter, userNameParameter, userPswdParameter, userEmailIDParameter, userMobileParameter, dOBParameter, userImageParameter, crbyParameter);
        }
    
        public virtual int VPL_PM_Users_Update(Nullable<decimal> transID, string userID, string userName, string userEMailID, string userMobile, Nullable<System.DateTime> dOb, string userImage, string active, string crby)
        {
            var transIDParameter = transID.HasValue ?
                new ObjectParameter("TransID", transID) :
                new ObjectParameter("TransID", typeof(decimal));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var userEMailIDParameter = userEMailID != null ?
                new ObjectParameter("UserEMailID", userEMailID) :
                new ObjectParameter("UserEMailID", typeof(string));
    
            var userMobileParameter = userMobile != null ?
                new ObjectParameter("UserMobile", userMobile) :
                new ObjectParameter("UserMobile", typeof(string));
    
            var dObParameter = dOb.HasValue ?
                new ObjectParameter("DOb", dOb) :
                new ObjectParameter("DOb", typeof(System.DateTime));
    
            var userImageParameter = userImage != null ?
                new ObjectParameter("UserImage", userImage) :
                new ObjectParameter("UserImage", typeof(string));
    
            var activeParameter = active != null ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(string));
    
            var crbyParameter = crby != null ?
                new ObjectParameter("Crby", crby) :
                new ObjectParameter("Crby", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VPL_PM_Users_Update", transIDParameter, userIDParameter, userNameParameter, userEMailIDParameter, userMobileParameter, dObParameter, userImageParameter, activeParameter, crbyParameter);
        }
    }
}
